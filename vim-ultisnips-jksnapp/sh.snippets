priority 1

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #!
`!p snip.rv = '#!/bin/' + getShell() + "\n\n" `
endsnippet

snippet !env "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n\n" `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0               # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2       # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:variable} in
  ${0:pattern} )
  ;;
  * )
  echo -e "\nYou chose poorly...\n"
  error_exit
  ;;
esac
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
endsnippet

snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
fi
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

# vim:ft=snippets:

snippet bash "bash shell script template"
#!/usr/bin/env bash

######Set Bash characteristics######
#Have scripts exit on unset variables.
#set -o nounset

#Use bash's builtin error checking.
set -o errexit

#Make pipeline's return status the value of the last (rightmost) command to
#exit with a non-zero status, or zero if all commands exit successfully.
set -o pipefail

# Set nocasematch on so shell patterns are case-insensitive.
#shopt -s nocasematch
######Set Bash characteristics######

#The trap will make sure that the script exits cleanly, even if a SIGHUP, SIGINT or SIGTERM is received.
trap error_exit SIGHUP SIGINT SIGTERM

error_exit() {
  #Function "error_exit" is used to exit cleanly while providing an error code.
  #Display error message and exit
  echo -e "\n\n$FUNCTIONTITLE: \${1:-"Unknown Error"}" 1>&2
  exit 1
}

SCRIPT="\$0"

#Set fonts for Help.
NORM=\`tput sgr0\`
BOLD=\`tput bold\`
REV=\`tput smso\`

number_of_arguments() {
  #Check the number of arguments. If none are passed, print help and exit.
  echo -e "\nNumber of arguments: $NUMARGS"
  echo -e "List of arguments: $ARGS"
  if [[ $NUMARGS -eq 0 ]]; then
    help
  fi
}

help() {
  #Help function
  echo -e "\\nHelp documentation for: ${BOLD}${SCRIPT}${NORM}\\n"
  echo -e "${BOLD}Basic usage:${NORM} $SCRIPT [OPTIONS] [ARGUMENTS]\\n"
  echo -e "Command line switches are optional. The following switches are recognized.\\n"
  echo -e "${BOLD}-h${NORM}  --Displays this help message. No further functions are performed.\\n"
  echo -e "${BOLD}-i${NORM}  --Starts script in interactive mode. Script will prompt user for values.\\n"
  echo -e "${BOLD}-p${NORM}  --Sets the password for an encrypted private key.\\n"
  echo -e "${BOLD}EXAMPLES:${NORM}"
  echo -e "This text describes the example"
  echo -e "  $SCRIPT example options and arguments\\n"
  exit 1
}

feature_not_implemented() {
  echo -e "This feature has not been implemented yet."
  exit 1
}

#### Start getopts code ###
#
##Parse command line flags
##If an option should be followed by an argument, it should be followed by a ":".
##Notice there is no ":" after "h". The leading ":" suppresses error messages from
##getopts. This is required to get my unrecognized option code to work.

while getopts :hip: FLAG; do
  case $FLAG in
    h)  #show help
      help
      ;;
    i) #start interactive mode
      MODE="interactive"
      ;;
    p) #password for encrypted private key
      PASSPHRASE="$OPTARG"
      ;;
    \?) #unrecognized option - show help
      echo -e "\\nOption -${BOLD}$OPTARG${NORM} not allowed."
      help
      #If you just want to display a simple error message instead of the full
      #help, remove the 2 lines above and uncomment the 2 lines below.
      #echo -e "Use ${BOLD}$SCRIPT -h${NORM} to see the help documentation.\\n"
      #exit 2
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

### End getopts code ###

ARGS="$@"
NUMARGS="$#"

number_of_arguments
if [[ "$MODE" == "interactive" ]]; then

else

fi
exit 0
$0
endsnippet

snippet function
${1:name}() {
  FUNCTIONTITLE="$1"
  $0
}
endsnippet

snippet	getopts "bash built-in for handling options"
#### Start getopts code ###
#
##Parse command line flags
##If an option should be followed by an argument, it should be followed by a ":".
##Notice there is no ":" after "h". The leading ":" suppresses error messages from
##getopts. This is required to get my unrecognized option code to work.

while getopts :hip: FLAG; do
  case $FLAG in
    h)  #show help
      help
      ;;
    i) #start interactive mode
      MODE="interactive"
      ;;
    p) #password for encrypted private key
      PASSPHRASE="$OPTARG"
      ;;
    \?) #unrecognized option - show help
      echo -e "\\nOption -${BOLD}$OPTARG${NORM} not allowed."
      help
      #If you just want to display a simple error message instead of the full
      #help, remove the 2 lines above and uncomment the 2 lines below.
      #echo -e "Use ${BOLD}$SCRIPT -h${NORM} to see the help documentation.\\n"
      #exit 2
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

### End getopts code ###
$0
endsnippet

snippet feature_not_implemented
feature_not_implemented() {
  echo -e "This feature has not been implemented yet."
  exit 1
}
$0
endsnippet

snippet help "script usage info"
SCRIPT="\$0"

#Set fonts for Help.
NORM=\`tput sgr0\`
BOLD=\`tput bold\`
REV=\`tput smso\`

help() {
  #Help function
  echo -e "\\nHelp documentation for ${BOLD}${SCRIPT}.${NORM}\\n"
  echo -e "${BOLD}Basic usage:${NORM} $SCRIPT [OPTIONS] [${1:argument}]\\n"
  echo -e "Command line switches are optional. The following switches are recognized.\\n"
  echo -e "${BOLD}-h${NORM}  --Displays this help message. No further functions are performed.\\n"
  echo -e "${BOLD}-i${NORM}  --Starts script in interactive mode. Script will prompt user for values.\\n"
  echo -e "${BOLD}-p${NORM}  --Sets the password for an encrypted private key.\\n"
  echo -e "${BOLD}EXAMPLES:${NORM}"
  echo -e "${1:This text describes the example.}"
  echo -e "  $SCRIPT ${2:example options and arguments.}\\n"
  exit 1
}
$0
endsnippet

snippet error_exit "calls error_exit function with error comment"
error_exit "Line $LINENO:\
  \n${0:unknown error}\n"
endsnippet
